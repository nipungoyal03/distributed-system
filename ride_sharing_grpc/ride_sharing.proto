syntax = "proto3";

package ride_sharing;

service RideSharingService {
  // Rider APIs
  rpc RequestRide(RideRequest) returns (RideResponse);
  rpc GetRideStatus(RideStatusRequest) returns (RideStatusResponse);

  // Driver APIs
  rpc AcceptRide(AcceptRideRequest) returns (AcceptRideResponse);
  rpc RejectRide(RejectRideRequest) returns (RejectRideResponse);
  rpc CompleteRide(RideCompletionRequest) returns (RideCompletionResponse);
}

// Message types for requesting a ride
message RideRequest {
  string rider_id = 1;
  string pickup_location = 2;
  string destination = 3;
}

message RideResponse {
  int32 ride_id = 1;  // Changed to int32
  string status = 2;  // Example: "assigned", "no_driver_available"
  string driver_id = 3; // Populated if a driver is assigned
}

// Message types for getting ride status
message RideStatusRequest {
  int32 ride_id = 1;  // Changed to int32
}

message RideStatusResponse {
  int32 ride_id = 1;  // Changed to int32
  string status = 2;  // Example: "waiting", "accepted", "on_ride", "completed"
  string driver_id = 3;
}

// Message types for accepting a ride
message AcceptRideRequest {
  string driver_id = 1;
  int32 ride_id = 2;  // Changed to int32
}

message AcceptRideResponse {
  string status = 1;  // Example: "accepted", "already_assigned"
}

// Message types for rejecting a ride
message RejectRideRequest {
  string driver_id = 1;
  int32 ride_id = 2;  // Changed to int32
}

message RejectRideResponse {
  string status = 1;
  string new_driver_id = 2;
}

// Message types for completing a ride
message RideCompletionRequest {
  string driver_id = 1;
  int32 ride_id = 2;  // Changed to int32
}

message RideCompletionResponse {
  string status = 1;  // Example: "completed", "error"
}
